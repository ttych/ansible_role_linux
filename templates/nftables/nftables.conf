#!/usr/sbin/nft -f

flush ruleset

include "{{ sys_nftables_d }}/*.nft"


{% if sys_network_wan_interface is defined and sys_network_wan_interface is not none %}
define WANLINK = {{ sys_network_wan_interface }}
{% endif %}
{% if sys_network_lan_interface is defined and sys_network_lan_interface is not none %}
define LANLINK = {{ sys_network_lan_interface }}
{% endif %}
{% if sys_network_wlan_interface is defined and sys_network_wlan_interface is not none %}
define WLANLINK = {{ sys_network_wlan_interface }}
{% endif %}


define BOGONS4 = {
       # "This" network
       0.0.0.0/8,
       # Private-use networks
       10.0.0.0/8,
       # Carrier-grade NAT
       100.64.0.0/10,
       # Loopback
       127.0.0.0/8,
       # Name collision occurrence
       127.0.53.53,
       # Link local
       169.254.0.0/16,
       # Private-use networks
       172.16.0.0/12,
       # IETF protocol assignments
       192.0.0.0/24,
       # TEST-NET-1
       192.0.2.0/24,
       # Private-use networks
       192.168.0.0/16,
       # Network interconnect device benchmark testing
       198.18.0.0/15,
       # TEST-NET-2
       198.51.100.0/24,
       # TEST-NET-3
       203.0.113.0/24,
       # Multicast
       224.0.0.0/4,
       # Reserved for future use
       240.0.0.0/4,
       # Limited broadcast
       255.255.255.255/32,
}

define BOGONS6 = {
       # Node-scope unicast unspecified address
       ::/128,
       # Node-scope unicast loopback address
       ::1/128,
       # IPv4-mapped addresses
       ::ffff:0:0/96,
       # IPv4-compatible addresses
       ::/96,
       # Remotely triggered black hole addresses
       100::/64,
       # Overlay routable cryptographic hash identifiers (ORCHID)
       2001:10::/28,
       # Documentation prefix
       2001:db8::/32,
       # Unique local addresses (ULA)
       fc00::/7,
       # Link-local unicast
       fe80::/10,
       # Site-local unicast (deprecated)
       fec0::/10,
       # Multicast
       ff00::/8,
       # # # # # # # # # #
       # 6to4 bogon (0.0.0.0/8)
       2002::/24,
       # 6to4 bogon (10.0.0.0/8)
       2002:a00::/24,
       # 6to4 bogon (127.0.0.0/8)
       2002:7f00::/24,
       # 6to4 bogon (169.254.0.0/16)
       2002:a9fe::/32,
       # 6to4 bogon (172.16.0.0/12)
       2002:ac10::/28,
       # 6to4 bogon (192.0.0.0/24)
       2002:c000::/40,
       # 6to4 bogon (192.0.2.0/24)
       2002:c000:200::/40,
       # 6to4 bogon (192.168.0.0/16)
       2002:c0a8::/32,
       # 6to4 bogon (198.18.0.0/15)
       2002:c612::/31,
       # 6to4 bogon (198.51.100.0/24)
       2002:c633:6400::/40,
       # 6to4 bogon (203.0.113.0/24)
       2002:cb00:7100::/40,
       # 6to4 bogon (224.0.0.0/4)
       2002:e000::/20,
       # 6to4 bogon (240.0.0.0/4)
       2002:f000::/20,
       # 6to4 bogon (255.255.255.255/32)
       2002:ffff:ffff::/48,
       # Teredo bogon (0.0.0.0/8)
       2001::/40,
       # Teredo bogon (10.0.0.0/8)
       2001:0:a00::/40,
       # Teredo bogon (127.0.0.0/8)
       2001:0:7f00::/40,
       # Teredo bogon (169.254.0.0/16)
       2001:0:a9fe::/48,
       # Teredo bogon (172.16.0.0/12)
       2001:0:ac10::/44,
       # Teredo bogon (192.0.0.0/24)
       2001:0:c000::/56,
       # Teredo bogon (192.0.2.0/24)
       2001:0:c000:200::/56,
       # Teredo bogon (192.168.0.0/16)
       2001:0:c0a8::/48,
       # Teredo bogon (198.18.0.0/15)
       2001:0:c612::/47,
       # Teredo bogon (198.51.100.0/24)
       2001:0:c633:6400::/56,
       # Teredo bogon (203.0.113.0/24)
       2001:0:cb00:7100::/56,
       # Teredo bogon (224.0.0.0/4)
       2001:0:e000::/36,
       # Teredo bogon (240.0.0.0/4)
       2001:0:f000::/36,
       # Teredo bogon (255.255.255.255/32)
       2001:0:ffff:ffff::/64,
}

# define DMZPORTFORWARDS = { http, https }


table inet filter {
      chain input {
            type filter hook input priority 0;
            policy drop;

            ct state vmap {
               established : accept,
               related : accept,
               invalid : drop
            } counter

            # Drop obviously spoofed loopback traffic
            iifname "lo" ip daddr != 127.0.0.0/8 drop
            iifname "lo" accept

            # Separate rules for traffic
            iifname vmap {
                    lo: accept,
{% if sys_network_wan_interface is defined and sys_network_wan_interface is not none %}
                    $WANLINK : jump input_wan,
{% endif %}
{% if sys_network_lan_interface is defined and sys_network_lan_interface is not none %}
                    $LANLINK : jump input_lan,
{% endif %}
            }
      }

	  chain input_wan {
            ip saddr { $BOGONS4 } drop
            ip6 saddr { $BOGONS6 } drop

		    icmp type echo-request limit rate 5/second accept
		    ip protocol icmp icmp type {
               destination-unreachable,
               echo-reply,
               echo-request,
               source-quench,
               time-exceeded
            } accept

            icmpv6 type echo-request limit rate 5/second accept
            icmpv6 type {
                   nd-neighbor-solicit,
                   nd-router-advert,
                   nd-neighbor-advert
            } accept

            ip protocol . th dport vmap {
{% for service in (sys_firewall_wan_services_base + sys_firewall_wan_services %}
               {{ service.protocol }} . {{ service.port }} : {{ service.policy|d("accept") }},
{% endfor %}
            }
      }

      chain input_lan {

		    icmp type echo-request limit rate 5/second accept
		    ip protocol icmp icmp type {
               destination-unreachable,
               echo-reply,
               echo-request,
               source-quench,
               time-exceeded
            } accept

            icmpv6 type echo-request limit rate 5/second accept
            icmpv6 type {
                   nd-neighbor-solicit,
                   nd-router-advert,
                   nd-neighbor-advert
            } accept

            ip protocol . th dport vmap {
{% for service in (sys_firewall_lan_services_base + sys_firewall_lan_services) %}
               {{ service.protocol }} . {{ service.port }} : {{ service.policy|d("accept") }},
{% endfor %}
            }
	  }

      chain forward {
            type filter hook forward priority 0;
            policy drop;

            ct state vmap {
               established : accept,
               related : accept,
               invalid : drop
            }

            iifname { lo, $LANLINK } accept

            # tcp dport { $DMZPORTFORWARD } counter
      }

      # chain output {
      #       type filter hook output priority 0;
      #       policy drop;

      #       accept
      # }

      # chain prerouting {
      #       type nat hook prerouting priority -100;
      #       # iifname $WANLINK tcp dport { $DMZPORTFORWARDS } dnat to 10.199.200.10
      # }

      chain postrouting {
            type nat hook postrouting priority 100;
            policy accept;

{% if sys_network_wan_interface is defined and sys_network_wan_interface is not none %}
            oif $WANLINK masquerade
{% endif %}
      }
}
